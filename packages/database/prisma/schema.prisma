// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  active        Boolean         @default(false)
  // Optional for WebAuthn support
  role          Role            @default(ADMIN)
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Novel {
  id String @id @default(cuid())
  title String
  slug String @unique
  synopsis String
  note String?
  urlCoverNovel String
  urlNovel String
  status NovelStatus @default(ONGOING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapters Chapter[]
  authors NovelAutor[]
  platforms NovelPlatform[]
  template Template?
}

model NovelAutor {
  novel     Novel     @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String
  author    Author    @relation(fields: [authorId], references: [id])
  authorId  String
  assignedAt DateTime @default(now())

  @@id([novelId, authorId])
}

model Author {
  id String @id @default(cuid())
  name String?
  pseudonym String
  urlProfile String
  urlCoverProfile String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  novels NovelAutor[]
}

model NovelPlatform {
  novel     Novel     @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String
  platform    Platform    @relation(fields: [platformId], references: [id])
  platformId  String
  assignedAt DateTime @default(now())

  @@id([novelId, platformId])
}

model Platform {
  id String @id @default(cuid())
  name String
  baseUrl String @unique
  code String @unique
  urlCover String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  novels NovelPlatform[]
}

model Chapter {
  id String @id @default(cuid())
  title String
  urlChapter String
  urlCoverChapter String?
  publishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  novelId String
  novel Novel @relation(fields: [novelId], references: [id], onDelete: Cascade)
  publication Publication?
}

model Publication {
  id String @id @default(cuid())
  chapterId String @unique
  idPublishedFacebook String? @unique 
  message String
  link String?
  // if the publication was published immediately in Facebook
  publishedFacebook Boolean @default(false)
  // scheduled publish datetime in seconds
  scheduledPublishTime Int?
  status PublicationStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}


model Template {
  id String @id @default(cuid())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  novelId String @unique
  novel Novel @relation(fields: [novelId], references: [id], onDelete: Cascade)
}

// Here web store: cron-job, frecuency, fac-api-key...
model Parameter {
  id String @id @default(cuid())
  name String @unique
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PublicationStatus {
  DRAFT
  HIDDEN
  PUBLISHED
  DELETED
}

enum Role {
  ADMIN
  SUPER_ADMIN
}

enum NovelStatus {
  // The novel is ongoing (default)
  ONGOING
  // The novel has been completed
  COMPLETE
  // The novel has been cancelled
  CANCELLED
  // The novel has announced that it will not publish new chapters in a long time
  HIATUS
  // The novel is not published new chapters in a long time
  DISCONTINUED 
  // The administration has decided to hide the novel
  AUTHOR_ISSUES
}
